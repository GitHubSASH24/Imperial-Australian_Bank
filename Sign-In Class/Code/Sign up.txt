using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

public class Bank
{
    private List<UserAccount> accounts;

    public Bank()
    {
        accounts = new List<UserAccount>();
    }

    public void SignUp()
    {
        Console.WriteLine("Welcome to the sign-up process.");
        Console.Write("Enter your first name: ");
        string firstName = Console.ReadLine();

        Console.Write("Enter your last name: ");
        string lastName = Console.ReadLine();

        Console.Write("Enter your email address: ");
        string email = Console.ReadLine();

        Console.Write("Enter your phone number: ");
        string phone = Console.ReadLine();

        Console.WriteLine("Do you want to generate a password? (yes/no)");
        string response = Console.ReadLine().ToLower();

        string password;
        if (response == "yes")
        {
            try
            {
                // Generate a password with length 8
                password = PasswordGenerator.GeneratePassword(8);
                Console.WriteLine("Generated Password: " + password);
            }
            catch (ArgumentException ex)
            {
                Console.WriteLine("Error: " + ex.Message);
                return;
            }
        }
        else if (response == "no")
        {
            Console.WriteLine("Please set a custom password:");
            Console.WriteLine("1. Must contain alphabetical characters (a-z)");
            Console.WriteLine("2. Must contain numerical characters (0-9)");
            Console.WriteLine("3. Must contain at least one special character");
            Console.Write("Enter your password: ");
            password = Console.ReadLine();
        }
        else
        {
            Console.WriteLine("Invalid response. Please enter 'yes' or 'no'.");
            return;
        }

        // Check if email already exists
        if (accounts.Exists(acc => acc.Email == email))
        {
            Console.WriteLine("Email already registered.");
            return;
        }

        // Validate password
        string passwordRequirements = GetPasswordRequirements();
        if (!IsPasswordValid(password))
        {
            Console.WriteLine("Password does not meet the requirements:");
            Console.WriteLine(passwordRequirements);
            return;
        }

        // Create a new user account and add it to the list
        UserAccount newUser = new UserAccount(firstName, lastName, email, phone, password);
        accounts.Add(newUser);

        Console.WriteLine("Sign up successful.");
    }

    public void SignIn()
    {
        Console.WriteLine("Welcome to the sign-in process.");
        Console.Write("Enter your email address: ");
        string email = Console.ReadLine();

        Console.Write("Enter your password: ");
        string password = Console.ReadLine();

        // Find user account with provided email
        UserAccount user = accounts.Find(acc => acc.Email == email);

        // Check if user exists and password matches
        if (user != null && user.Password == password)
        {
            Console.WriteLine("Sign in successful.");
            // Provide access to banking operations
        }
        else
        {
            Console.WriteLine("Invalid email or password.");
        }
    }

    private bool IsPasswordValid(string password)
    {
        // Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one digit, and one special character
        return password.Length >= 8 &&
               Regex.IsMatch(password, "[A-Za-z]") && // Contains alphabetical characters
               Regex.IsMatch(password, "[0-9]") &&  // Contains numerical characters
               Regex.IsMatch(password, "[!@#$%^&*]"); // Contains special character
    }

    private string GetPasswordRequirements()
    {
        return "Password must be at least 8 characters long and contain at least one alphabetical character, one numerical character, and one special character.";
    }
}

public class UserAccount
{
    public string FirstName { get; }
    public string LastName { get; }
    public string Email { get; }
    public string Phone { get; }
    public string Password { get; }

    public UserAccount(string firstName, string lastName, string email, string phone, string password)
    {
        FirstName = firstName;
        LastName = lastName;
        Email = email;
        Phone = phone;
        Password = password;
    }
}

// Password generator class remains unchanged
public class PasswordGenerator
{
    private const string UppercaseChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private const string LowercaseChars = "abcdefghijklmnopqrstuvwxyz";
    private const string DigitChars = "0123456789";
    private const string SpecialChars = "!@#$%^&*()-_=+";

    private static readonly Random random = new Random();

    public static string GeneratePassword(int length)
    {
        // Implementation remains the same
        // ...
    }

    private static string ShuffleString(string str)
    {
        // Implementation remains the same
        // ...
    }
}

class Program
{
    static void Main()
    {
        Bank myBank = new Bank();

        // Sign up a user
        myBank.SignUp();

        // Attempt sign in
        myBank.SignIn();
    }
}
